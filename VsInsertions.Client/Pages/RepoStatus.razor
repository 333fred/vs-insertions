@inject HttpClient httpClient

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudChipSet @bind-SelectedChip="selectedVsBranch" Filter="true" Mandatory="true">
        @foreach (var item in info?.Branches ?? ImmutableArray<BranchInformation>.Empty)
        {
            <MudChip Label="true" Text="@(item.VsBranch)" />
        }
    </MudChipSet>

    @if (selectedVsBranch != null)
    {
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Last Insertion Status: @selectedVsBranch.Text</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (!lastInsertionDetails.TryGetValue(selectedVsBranch.Text, out var details))
                {
                    <MudText Typo="Typo.body1">Loading...</MudText>
                }
                else
                {
                    <MudLink Typo="Typo.body1" Href="@details.Url" target="_blank">Link</MudLink>
                    <MudText Typo="Typo.body1">Commit: @details.Commit</MudText>
                    <MudText Typo="Typo.body1">Date: @details.Date</MudText>
                    <MudText Typo="Typo.body1">Comment: @details.Comment</MudText>
                }
            </MudCardContent>
        </MudCard>

        @if (vsInsertionsByBranch.TryGetValue(selectedVsBranch.Text, out var insertions))
        {
            @foreach (var insertion in insertions)
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Insertion: @insertion.Title</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                    </MudCardContent>
                </MudCard>
            }
        }
        else
        {
            <MudText Typo="Typo.body1">Loading insertions...</MudText>
        }
    }
</MudContainer>

@code {
    [Parameter] public string VsCookie { get; set; } = string.Empty;
    RoslynInformation? info = null;

    MudChip? selectedVsBranch = null;

    readonly Dictionary<string, CommitDetails> lastInsertionDetails = new();
    readonly Dictionary<string, ImmutableArray<VsInsertion>> vsInsertionsByBranch = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var stateChanged = false;
        if (firstRender)
        {
            info = await RoslynInformation.CreateAsync(httpClient);
            stateChanged = true;
        }

        if (selectedVsBranch != null && !lastInsertionDetails.ContainsKey(selectedVsBranch.Text))
        {
            await LoadLastInsertionDetailsAsync(selectedVsBranch.Text);
            stateChanged = true;
        }

        if (selectedVsBranch != null && !vsInsertionsByBranch.ContainsKey(selectedVsBranch.Text))
        {
            var vsInsertions = await httpClient.GetInsertionsAsync(selectedVsBranch.Text, StatusFilter.Active, 0, "Roslyn");
            vsInsertionsByBranch.Add(selectedVsBranch.Text, vsInsertions);
            stateChanged = true;
        }

        if (stateChanged)
            StateHasChanged();
    }

    protected override Task OnParametersSetAsync()
    {
        if (VsCookie != null)
            httpClient.DefaultRequestHeaders.Add("Cookie", VsCookie);
        return Task.CompletedTask;
    }

    private async Task LoadLastInsertionDetailsAsync(string vsBranch)
    {
        var lastInsertionDetails = await httpClient.GetLastDetailsForRepo("Roslyn", vsBranch);
        if (lastInsertionDetails is { } details)
            this.lastInsertionDetails.Add(vsBranch, details);
        else
            this.lastInsertionDetails.Add(vsBranch, new CommitDetails("Unknown", DateTimeOffset.MinValue, "Unknown", ""));
    }
}
