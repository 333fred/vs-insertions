@page "/"
@using System.Text.Json.Nodes
@using System.Text.Json
@using System.Runtime.InteropServices
@using System.Text.RegularExpressions
@rendermode RenderMode.InteractiveServer
@inject IJSRuntime JSRuntime

<RepoStatus VsCookie="@cookie" />

<PageTitle>Insertions</PageTitle>

<h1>Insertions</h1>

<div>
    <label>Cookie:</label>
    <input type="text" class="form-control d-inline-block w-auto" @bind="cookie" placeholder="@(!browser ? "Checking storage..." : "")" />
    <label title="Remember Cookie value you entered in local browser storage">
        <input type="checkbox" class="form-check-input" @bind="remember" />
        Remember
    </label>
</div>

<div class="my-2">
    <select class="form-select d-inline-block w-auto" @bind="statusFilter">
        <option value="@StatusFilter.All">All</option>
        <option value="@StatusFilter.Active">Only active</option>
    </select>

    <button class="btn btn-primary me-2" @onclick="StartAsync">Start</button>
    @if (loading)
    {
        @: Loading...
    }
</div>

@if (!started || errorHtml != null)
{
    <p>Please provide value of the Cookie header which your browser sends for <a href="@listUrl">this URL</a> (open Developer Tools in your browser, visit the URL, expand the request in Network tab, look for Cookie in Request Headers, copy its value and paste it into the text box above) and then hit "Start".</p>
    if (errorHtml != null)
    {
        <p>⚠️ An error occurred. You may need to refresh the Cookie header. This is the HTML response returned:</p>
        <iframe srcdoc="@errorHtml"></iframe>
    }
}
else if (insertions == null)
{
    <p>Loading...</p>
}
else
{
    <label>Repo:</label>
    <select class="form-select d-inline-block w-auto me-3" @bind="currentRepo">
        @foreach (var repo in insertions.Select(x => x.Repo).Distinct())
        {
            <option value="@repo">@repo</option>
        }
    </select>

    <label>Target:</label>
    <select class="form-select d-inline-block w-auto me-3" @bind="currentTargetBranch">
        @foreach (var branch in insertions.Select(x => x.TargetBranch).Distinct())
        {
            <option value="@branch">@branch</option>
        }
    </select>

    <button class="btn btn-outline-secondary btn-sm" @onclick="LoadRecentRps">Load @numberOfRecentRpsToLoad next recent RPS data</button>

    <ol class="mt-2">
        @foreach (var insertion in insertions)
        {
            if (insertion.Repo != currentRepo || insertion.TargetBranch != currentTargetBranch)
            {
                continue;
            }

            <li>
                <span title="@insertion.Status">@StatusToEmoji(insertion.Status)</span>
                <span title="Draft? @insertion.IsDraft">@IsDraftToEmoji(insertion.IsDraft)</span>

                <span style="margin-left: 0.1em; margin-right: 0.1em">
                    @foreach (var review in insertion.Reviews)
                    {
                        <img src="@review.ImageUrl" title="@review.DisplayName: @review.Vote"
                            style="width: 1em; height: 1em; border: 0.1em solid @VoteToColor(review.Vote)" />
                    }
                </span>

                @insertion.SourceBranch

                <a href="@insertion.Url" title="@insertion.Title">@insertion.BuildNumber</a>

                <button class="btn btn-outline-secondary btn-sm" @onclick="() => insertion.DisplayJson = !insertion.DisplayJson">JSON</button>
                <button class="btn btn-outline-danger btn-sm" @onclick="@(() => insertion.AbandonAsync(client))" disabled="@(insertion.Status != PullRequestStatus.Active)">Abandon</button>

                @if (insertion.Abandoning)
                {
                    @: Abandoning...
                }

                @if (insertion.RpsSummary is null)
                {
                    @: RPS not loaded
                }
                else if (!insertion.RpsSummary.Loaded)
                {
                    @: Loading RPS...
                }
                else
                {
                    @: DDRIT: @RpsRunToString(insertion.RpsSummary.Ddrit),
                    @: Speedometer: @RpsRunToString(insertion.RpsSummary.Speedometer)
                    @(" ")
                }

                <button class="btn btn-outline-secondary btn-sm" @onclick="@(() => insertion.RefreshRpsSummary(client))">Refresh RPS</button>

                @if (insertion.DisplayJson)
                {
                    <pre>@insertion.Json</pre>
                }
            </li>
        }
    </ol>
    <button class="btn btn-outline-secondary me-2" @onclick="LoadMoreAsync">Load more</button>
    @if (loading)
    {
        @: Loading...
    }

    <p></p>
}

@code {
    private static readonly int numberOfRecentRpsToLoad = 10;

    // https://learn.microsoft.com/en-us/rest/api/azure/devops/git/pull-requests/get-pull-requests?view=azure-devops-rest-6.0&tabs=HTTP
    private static readonly string listUrl = "https://dev.azure.com/devdiv/devdiv/_apis/git/repositories/a290117c-5a8a-40f7-bc2c-f14dbe3acf6d/pullrequests?searchCriteria.creatorId=122d5278-3e55-4868-9d40-1e28c2515fc4&searchCriteria.reviewerId=6c25b447-1d90-4840-8fde-d8b22cb8733e&api-version=6.0";

    private HttpClient client = null!;
    private bool browser;
    private string? cookie;
    private bool remember = true;
    private bool started;
    private bool loading;
    private StatusFilter statusFilter;
    private string currentRepo = "Roslyn";
    private string currentTargetBranch = "refs/heads/main";
    private VsInsertion[]? insertions;
    private string? errorHtml;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            cookie = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "cookie");
            browser = true;
            StateHasChanged();
        }
    }

    private async Task StartAsync()
    {
        if (string.IsNullOrEmpty(cookie))
        {
            return;
        }

        started = true;
        insertions = null;
        errorHtml = null;
        StateHasChanged();

        if (remember)
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "cookie", cookie);
        }

        client = new HttpClient();
        client.DefaultRequestHeaders.Add("Cookie", cookie);

        await LoadMoreAsync();
    }

    private async Task LoadMoreAsync()
    {
        loading = true;
        try
        {
            var skip = insertions?.Length ?? 0;
            var url = listUrl + "&searchCriteria.status=" + statusFilter.ToString().ToLowerInvariant() + "&$top=100&$skip=" + skip;
            Console.WriteLine(url);
            var response = await client.GetStringAsync(url);
            Console.WriteLine("Loaded");

            JsonNode? node;
            try
            {
                node = JsonNode.Parse(response);
            }
            catch
            {
                errorHtml = response;
                return;
            }

            errorHtml = null;
            var moreInsertions = node!["value"]!.AsArray().Select(x => new VsInsertion(x!));

            if (insertions == null)
            {
                insertions = moreInsertions.ToArray();
            }
            else
            {
                insertions = insertions.Concat(moreInsertions).ToArray();
            }
        }
        finally
        {
            loading = false;
        }
    }

    private void LoadRecentRps()
    {
        if (insertions != null)
        {
            var count = 0;
            foreach (var insertion in insertions)
            {
                if (insertion.RpsSummary is null)
                {
                    count++;
                    insertion.RefreshRpsSummary(client);
                }

                if (count >= numberOfRecentRpsToLoad)
                {
                    break;
                }
            }
        }
    }


    static string RpsRunToString(RpsRun? run)
    {
        if (run == null || run.InProgress || (run.Regressions == -1 && run.BrokenTests == -1))
        {
            return "?";
        }

        if (run.BrokenTests is not (0 or -1))
        {
            return $"{numberToString(run.Regressions)}+{run.BrokenTests}";
        }

        return numberToString(run.Regressions);

        static string numberToString(int num)
        {
            return num == -1 ? "?" : $"{num}";
        }
    }

    static string StatusToEmoji(PullRequestStatus status) => status switch
    {
        PullRequestStatus.Abandoned => "🔴", // red circle
        PullRequestStatus.Active => "🟡", // yellow circle
        PullRequestStatus.Completed => "🟢", // green circle
        _ => "?",
    };

    static string IsDraftToEmoji(bool isDraft) => isDraft switch
    {
        true => "🔘", // white circle
        false => "⚫", // black circle
    };

    static string VoteToColor(Vote vote) => vote switch
    {
        Vote.Approved => "green",
        Vote.Rejected => "red",
        Vote.NoVote => "lightgray",
        _ => "yellow",
    };
}
