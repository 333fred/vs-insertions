@page "/insertions"
@using System.Text.Json.Nodes
@attribute [RenderModeInteractiveServer]

<PageTitle>Insertions</PageTitle>

<h1>Insertions</h1>

<label>Cookie:</label>
<input type="text" @bind="cookie" />
<button @onclick="StartAsync">Start</button>

@if (!started)
{
    <p>Please provide cookie (which your browser sends for <a href="@listUrl">this URL</a>) and hit "Start".</p>
}
else if (insertions == null)
{
    <p>Loading...</p>
}
else
{
    <ul>
        @foreach (var insertion in insertions)
        {
            <li>
                <details>
                    <summary><a href="@insertion.Url">@insertion.Title</a></summary>

                    <pre>@insertion.Json</pre>
                </details>
            </li>
        }
    </ul>
}

@code {
    // https://learn.microsoft.com/en-us/rest/api/azure/devops/git/pull-requests/get-pull-requests?view=azure-devops-rest-6.0&tabs=HTTP
    private static readonly string listUrl = "https://dev.azure.com/devdiv/devdiv/_apis/git/repositories/a290117c-5a8a-40f7-bc2c-f14dbe3acf6d/pullrequests?searchCriteria.creatorId=122d5278-3e55-4868-9d40-1e28c2515fc4&searchCriteria.reviewerId=6c25b447-1d90-4840-8fde-d8b22cb8733e&searchCriteria.status=all&api-version=6.0";

    private string? cookie;
    private bool started;
    private VsInsertion[]? insertions;

    private async Task StartAsync()
    {
        if (string.IsNullOrEmpty(cookie))
        {
            return;
        }

        started = true;

        using var client = new HttpClient();
        client.DefaultRequestHeaders.Add("Cookie", cookie);

        var json = await client.GetStringAsync(listUrl);
        var node = JsonNode.Parse(json);
        insertions = node!["value"]!.AsArray().Select(x => new VsInsertion(x!)).ToArray();
    }

    class VsInsertion(JsonNode node)
    {
        public string Url => $"https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/{node["pullRequestId"]}";
        public string Title => node["title"]!.ToString();
        public string Json => node.ToJsonString(new() { WriteIndented = true });
    }
}
