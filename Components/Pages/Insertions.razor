@page "/insertions"
@using System.Text.Json.Nodes
@using System.Text.Json
@attribute [RenderModeInteractiveServer]

<PageTitle>Insertions</PageTitle>

<h1>Insertions</h1>

<div>
    <label>Cookie:</label>
    <input type="text" @bind="cookie" />
    <button @onclick="StartAsync">Start</button>
    @if (loading)
    {
        @: Loading...
    }
</div>

@if (!started)
{
    <p>Please provide cookie (which your browser sends for <a href="@listUrl">this URL</a>) and hit "Start".</p>
}
else if (lookup == null)
{
    <p>Loading...</p>
}
else
{
    <label>Repo:</label>
    <select @bind="currentRepo">
        <option value="@Repo.Roslyn">Roslyn</option>
        <option value="@Repo.Razor">Razor</option>
    </select>
    <ol>
        @foreach (var insertion in lookup[currentRepo])
        {
            <li>
                <span title="@insertion.Status">@StatusToEmoji(insertion.Status)</span>
                <span title="Draft? @insertion.IsDraft">@IsDraftToEmoji(insertion.IsDraft)</span>

                <a href="@insertion.Url">@insertion.Title</a>

                <button @onclick="() => insertion.DisplayJson = !insertion.DisplayJson">JSON</button>
                <button @onclick="insertion.AbandonAsync" disabled="@(insertion.Status == PullRequestStatus.Abandoned)">Abandon</button>

                @if (insertion.Abandoning)
                {
                    @: Abandoning...
                }

                @if (insertion.DisplayJson)
                {
                    <pre>@insertion.Json</pre>
                }
            </li>
        }
    </ol>
    <button @onclick="LoadMoreAsync">Load more</button>
    @if (loading)
    {
        @: Loading...
    }
}

@code {
    // https://learn.microsoft.com/en-us/rest/api/azure/devops/git/pull-requests/get-pull-requests?view=azure-devops-rest-6.0&tabs=HTTP
    private static readonly string listUrl = "https://dev.azure.com/devdiv/devdiv/_apis/git/repositories/a290117c-5a8a-40f7-bc2c-f14dbe3acf6d/pullrequests?searchCriteria.creatorId=122d5278-3e55-4868-9d40-1e28c2515fc4&searchCriteria.reviewerId=6c25b447-1d90-4840-8fde-d8b22cb8733e&searchCriteria.status=all&api-version=6.0&$top=100";

    private HttpClient client = null!;
    private string? cookie;
    private bool started;
    private bool loading;
    private Repo currentRepo;
    private VsInsertion[]? insertions;
    private ILookup<Repo, VsInsertion>? lookup;

    private async Task StartAsync()
    {
        if (string.IsNullOrEmpty(cookie))
        {
            return;
        }

        started = true;
        insertions = null;

        client = new HttpClient();
        client.DefaultRequestHeaders.Add("Cookie", cookie);

        await LoadMoreAsync();
    }

    private async Task LoadMoreAsync()
    {
        loading = true;
        try
        {
            var skip = insertions?.Length ?? 0;
            var url = listUrl + "&$skip=" + skip;
            Console.WriteLine(url);
            var json = await client.GetStringAsync(url);
            var node = JsonNode.Parse(json);
            var moreInsertions = node!["value"]!.AsArray().Select(x => new VsInsertion(this, x!));

            if (insertions == null)
            {
                insertions = moreInsertions.ToArray();
            }
            else
            {
                insertions = insertions.Concat(moreInsertions).ToArray();
            }
            lookup = insertions.ToLookup(x => x.Repo);
        }
        finally
        {
            loading = false;
        }
    }

    class VsInsertion(Insertions page, JsonNode node)
    {
        public bool DisplayJson { get; set; }
        public bool Abandoning { get; private set; }

        public string PullRequestId => node["pullRequestId"]!.ToString();
        public string Url => $"https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/{PullRequestId}";
        public string Title => node["title"]!.ToString();
        public string Json => node.ToJsonString(new() { WriteIndented = true });
        public PullRequestStatus Status { get; private set; } = Enum.Parse<PullRequestStatus>(node["status"]!.ToString(), ignoreCase: true);
        public bool IsDraft => (bool)node["isDraft"]!;
        public Repo Repo =>
            Title.Contains("Roslyn") ? Repo.Roslyn
            : Title.Contains("Razor") ? Repo.Razor
            : throw new InvalidOperationException($"Unknown repo for {Title}");

        public async Task AbandonAsync()
        {
            Abandoning = true;
            try
            {
                var response = await page.client.PatchAsJsonAsync(
                    $"https://dev.azure.com/devdiv/devdiv/_apis/git/repositories/a290117c-5a8a-40f7-bc2c-f14dbe3acf6d/pullrequests/{PullRequestId}?api-version=7.0",
                    new { status = "abandoned" });
                Console.WriteLine(response);
                Console.WriteLine(await response.Content.ReadAsStringAsync());

                if (response.IsSuccessStatusCode)
                {
                    Status = PullRequestStatus.Abandoned;
                }
            }
            finally
            {
                Abandoning = false;
            }
        }
    }

    enum PullRequestStatus
    {
        Abandoned,
        Active,
        Completed
    }

    static string StatusToEmoji(PullRequestStatus status) => status switch
    {
        PullRequestStatus.Abandoned => "🔴", // red circle
        PullRequestStatus.Active => "🟡", // yellow circle
        PullRequestStatus.Completed => "🟢", // green circle
    };

    static string IsDraftToEmoji(bool isDraft) => isDraft switch
    {
        true => "🔘", // white circle
        false => "⚫", // black circle
    };

    enum Repo
    {
        Roslyn,
        Razor
    }
}
