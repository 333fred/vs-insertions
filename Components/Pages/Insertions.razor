@page "/"
@using System.Text.Json.Nodes
@using System.Text.Json
@using System.Runtime.InteropServices
@using System.Text.RegularExpressions
@attribute [RenderModeInteractiveServer]
@inject IJSRuntime JSRuntime

<PageTitle>Insertions</PageTitle>

<h1>Insertions</h1>

<div>
    <label>Cookie:</label>
    <input type="text" @bind="cookie" placeholder="@(!browser ? "Checking storage..." : "")" />
    <label>
        <input type="checkbox" @bind="remember" />
        Remember
    </label>
    
    <select @bind="statusFilter">
        <option value="@StatusFilter.All">All</option>
        <option value="@StatusFilter.Active">Only active</option>
    </select>

    <button @onclick="StartAsync">Start</button>
    @if (loading)
    {
        @: Loading...
    }
</div>

@if (!started)
{
    <p>Please provide cookie (which your browser sends for <a href="@listUrl">this URL</a>) and hit "Start".</p>
}
else if (insertions == null)
{
    <p>Loading...</p>
}
else
{
    <label>Repo:</label>
    <select @bind="currentRepo">
        @foreach (var repo in insertions.Select(x => x.Repo).Distinct())
        {
            <option value="@repo">@repo</option>
        }
    </select>

    <label>Target:</label>
    <select @bind="currentTargetBranch">
        @foreach (var branch in insertions.Select(x => x.TargetBranch).Distinct())
        {
            <option value="@branch">@branch</option>
        }
    </select>

    <ol>
        @foreach (var insertion in insertions)
        {
            if (insertion.Repo != currentRepo || insertion.TargetBranch != currentTargetBranch)
            {
                continue;
            }

            <li>
                <span title="@insertion.Status">@StatusToEmoji(insertion.Status)</span>
                <span title="Draft? @insertion.IsDraft">@IsDraftToEmoji(insertion.IsDraft)</span>

                <span style="margin-left: 0.1em; margin-right: 0.1em">
                    @foreach (var review in insertion.Reviews)
                    {
                        <img src="@review.ImageUrl" title="@review.DisplayName: @review.Vote"
                            style="width: 1em; height: 1em; border: 0.1em solid @VoteToColor(review.Vote)" />
                    }
                </span>

                @insertion.SourceBranch

                <a href="@insertion.Url" title="@insertion.Title">@insertion.BuildNumber</a>

                <button @onclick="() => insertion.DisplayJson = !insertion.DisplayJson">JSON</button>
                <button @onclick="insertion.AbandonAsync" disabled="@(insertion.Status != PullRequestStatus.Active)">Abandon</button>

                @if (insertion.Abandoning)
                {
                    @: Abandoning...
                }

                @if (insertion.DisplayJson)
                {
                    <pre>@insertion.Json</pre>
                }
            </li>
        }
    </ol>
    <button @onclick="LoadMoreAsync">Load more</button>
    @if (loading)
    {
        @: Loading...
    }
}

@code {
    // https://learn.microsoft.com/en-us/rest/api/azure/devops/git/pull-requests/get-pull-requests?view=azure-devops-rest-6.0&tabs=HTTP
    private static readonly string listUrl = "https://dev.azure.com/devdiv/devdiv/_apis/git/repositories/a290117c-5a8a-40f7-bc2c-f14dbe3acf6d/pullrequests?searchCriteria.creatorId=122d5278-3e55-4868-9d40-1e28c2515fc4&searchCriteria.reviewerId=6c25b447-1d90-4840-8fde-d8b22cb8733e&api-version=6.0";

    private HttpClient client = null!;
    private bool browser;
    private string? cookie;
    private bool remember = true;
    private bool started;
    private bool loading;
    private StatusFilter statusFilter;
    private string currentRepo = "Roslyn";
    private string currentTargetBranch = "refs/heads/main";
    private VsInsertion[]? insertions;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            cookie = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "cookie");
            browser = true;
            StateHasChanged();
        }
    }

    private async Task StartAsync()
    {
        if (string.IsNullOrEmpty(cookie))
        {
            return;
        }

        started = true;
        insertions = null;

        if (remember)
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "cookie", cookie);
        }

        client = new HttpClient();
        client.DefaultRequestHeaders.Add("Cookie", cookie);

        await LoadMoreAsync();
    }

    private async Task LoadMoreAsync()
    {
        loading = true;
        try
        {
            var skip = insertions?.Length ?? 0;
            var url = listUrl + "&searchCriteria.status=" + statusFilter.ToString().ToLowerInvariant() + "&$top=100&$skip=" + skip;
            Console.WriteLine(url);
            var json = await client.GetStringAsync(url);
            Console.WriteLine("Loaded");
            var node = JsonNode.Parse(json);
            var moreInsertions = node!["value"]!.AsArray().Select(x => new VsInsertion(this, x!));

            if (insertions == null)
            {
                insertions = moreInsertions.ToArray();
            }
            else
            {
                insertions = insertions.Concat(moreInsertions).ToArray();
            }
        }
        finally
        {
            loading = false;
        }
    }

    class VsInsertion(Insertions page, JsonNode node)
    {
        private Match? parsedTitle;

        public bool DisplayJson { get; set; }
        public bool Abandoning { get; private set; }

        public string PullRequestId => node["pullRequestId"]!.ToString();
        public string Url => $"https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/{PullRequestId}";
        public string Title => node["title"]!.ToString();
        public Match ParsedTitle => (parsedTitle ??= Regex.Match(Title, @"(?<repo>\w+) '(?<source>[^']+)/(?<build>[\d.]+)' Insertion into (?<target>.*)"));
        public string Json => node.ToJsonString(new() { WriteIndented = true });
        public PullRequestStatus Status { get; private set; } = Enum.Parse<PullRequestStatus>(node["status"]!.ToString(), ignoreCase: true);
        public bool IsDraft => (bool)node["isDraft"]!;
        public string Repo => ParsedTitle.Groups["repo"].Value;
        public string SourceBranch => ParsedTitle.Groups["source"].Value;
        public string BuildNumber => ParsedTitle.Groups["build"].Value;
        public string TargetBranch => node["targetRefName"]!.ToString();
        public Review[] Reviews { get; } = node["reviewers"]?.AsArray().Select(x => new Review(x!)).ToArray() ?? Array.Empty<Review>();

        public async Task AbandonAsync()
        {
            Abandoning = true;
            try
            {
                var response = await page.client.PatchAsJsonAsync(
                    $"https://dev.azure.com/devdiv/devdiv/_apis/git/repositories/a290117c-5a8a-40f7-bc2c-f14dbe3acf6d/pullrequests/{PullRequestId}?api-version=7.0",
                    new { status = "abandoned" });
                Console.WriteLine(response);
                Console.WriteLine(await response.Content.ReadAsStringAsync());

                if (response.IsSuccessStatusCode)
                {
                    Status = PullRequestStatus.Abandoned;
                }
            }
            finally
            {
                Abandoning = false;
            }
        }
    }

    class Review(JsonNode node)
    {
        public string DisplayName => node["displayName"]!.ToString();
        public string ImageUrl => node["imageUrl"]!.ToString();
        public Vote Vote => (Vote)(int)node["vote"]!;
    }

    enum PullRequestStatus
    {
        Abandoned,
        Active,
        Completed
    }

    enum StatusFilter
    {
        All,
        Active
    }

    static string StatusToEmoji(PullRequestStatus status) => status switch
    {
        PullRequestStatus.Abandoned => "🔴", // red circle
        PullRequestStatus.Active => "🟡", // yellow circle
        PullRequestStatus.Completed => "🟢", // green circle
        _ => "?",
    };

    static string IsDraftToEmoji(bool isDraft) => isDraft switch
    {
        true => "🔘", // white circle
        false => "⚫", // black circle
    };

    enum Vote
    {
        Approved = 10,
        ApprovedWithSuggestions = 5,
        NoVote = 0,
        WaitingForAuthor = -5,
        Rejected = -10,
    }

    static string VoteToColor(Vote vote) => vote switch
    {
        Vote.Approved => "green",
        Vote.Rejected => "red",
        Vote.NoVote => "lightgray",
        _ => "yellow",
    };
}
